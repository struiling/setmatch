<h1>Profile matches</h1>

<% if (typeof(traits) !== 'undefined' && traits.length > 0) { %>
<p> 
    <% _.each(traits, function(trait, i) { %>
        <%- trait.get("name") + ": " + trait.get("value") %>
        <% if (i !== trait.length) { %> 
        <br />  
        <% } %>
    <% }); %>
</p>
<% } %>

<% _.each(groups, function(group) { %>
    <h3><a href="/group/<%= group.slug %>"><%= group.name %></a></h3>
    <ul>
    <% _.each(profiles[group.slug], function(profile) { %>
        <li><a href="/profile/<%= profile.get("slug") %>"><%= profile.get("t_" + settings.global.fname) %> <%= profile.get("t_" + settings.global.lname) %></a></li>
    <% }); %>
    </ul>
<% }); %>



<script src="/js/d3.v3.min.js"></script>
<script src="//code.jquery.com/jquery-1.10.1.min.js"></script>

        <script>

        var diameter = $("#main").width(),
            format = d3.format(",d"),
            color = d3.scale.category20c();
        var bubble = d3.layout.pack()
            .sort(null)
            .size([diameter, diameter])
            .padding(1.5);

        var svg = d3.select("#main").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "bubble");

        d3.json("/api/v1/traits/KkuUBNivsq", function(error, data) {
			console.log("error: " + error);
			console.log("data: " + JSON.stringify(data));
			var root = counts(data);
			console.log("root: " + JSON.stringify(root));
			var node = svg.selectAll(".node")
				.data(bubble.nodes(root)
				.filter(function(d) { return !d.children; }))
			.enter().append("g")
				.attr("class", "node")
				.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

			node.append("title")
				.text(function(d) { return d.trait + ": " + format(d.value); });

			node.append("a")
    			.attr("xlink:href", function(d) {return "/profile/" + d.trait; })
    			.append("circle")
				.attr("r", function(d) { 
			  		console.log("d: " + d);
			  		return d.r; })
				.style("fill", function(d) { return color(d.trait); });

			node.append("text")
				.attr("dy", ".3em")
				.style("text-anchor", "middle")
				.text(function(d) {
			  		return d.trait.substring(0, d.r / 3); });
        });

        function counts(d) {
        	var classes = [];
        	for (var key in d.counts) {
        		classes.push({trait: key, value: d.counts[key]})
        	}
        	return {children: classes};
        }

        // Returns a flattened hierarchy containing all leaf nodes under the root.
        /*function classes(root) {
          var classes = [];

          function recurse(name, node) {
            if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
            else classes.push({packageName: name, className: node.name, value: node.size});
          }

          recurse(null, root);
          return {children: classes};
        }*/

        d3.select(self.frameElement).style("height", diameter + "px");

        </script>

        